name: Java SonarQube SAST Analysis

on:
  push:
    branches: [ main, develop, feat/* ]
    paths:
      - 'apis/java-vulnerabilities/**'
  pull_request:
    branches: [ main, develop, feat/* ]
    paths:
      - 'apis/java-vulnerabilities/**'
  workflow_dispatch:

jobs:
  sonarqube:
    name: SonarQube SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube analysis
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build Java project
      run: |
        cd apis/java-vulnerabilities
        mvn clean compile test-compile
    
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        HUB_TOKEN: ${{ secrets.HUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        scannerHome: ${{ github.workspace }}/.sonar/scanner
        args: >
          -Dsonar.projectKey=java-vulnerabilities
          -Dsonar.projectName=Java Vulnerabilities Example
          -Dsonar.projectVersion=1.0.0
          -Dsonar.sources=apis/java-vulnerabilities/src/main/java
          -Dsonar.java.binaries=apis/java-vulnerabilities/target/classes
          -Dsonar.java.libraries=apis/java-vulnerabilities/target/lib/*.jar
          -Dsonar.java.source=11
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.qualitygate.wait=true
          -Dsonar.analysis.mode=publish
          -Dsonar.pullrequest.key=${{ github.event.number }}
          -Dsonar.pullrequest.branch=${{ github.head_ref }}
          -Dsonar.pullrequest.base=${{ github.base_ref }}
    
    - name: Comment PR with SonarQube results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const sonarComment = comments.find(comment => 
            comment.body.includes('SonarQube analysis')
          );
          
          if (sonarComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: sonarComment.id,
              body: `🔍 **SonarQube SAST Analysis Complete**
              
              📊 **Analysis Results:**
              - **Project**: Java Vulnerabilities Example
              - **Branch**: \`${{ github.head_ref }}\`
              - **Analysis URL**: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=java-vulnerabilities
              
              🚨 **Expected Security Issues:**
              - **Critical**: SQL Injection, Command Injection, Path Traversal
              - **Major**: XSS, Weak Encryption, Deserialization
              - **Minor**: Hardcoded Password, Weak Hash, Insecure Random
              - **Info**: Log Injection, Sensitive Data Exposure
              
              📝 **Next Steps:**
              1. Review security hotspots in SonarQube dashboard
              2. Address critical and major vulnerabilities
              3. Update code quality based on findings`
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🔍 **SonarQube SAST Analysis Complete**
              
              📊 **Analysis Results:**
              - **Project**: Java Vulnerabilities Example
              - **Branch**: \`${{ github.head_ref }}\`
              - **Analysis URL**: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=java-vulnerabilities
              
              🚨 **Expected Security Issues:**
              - **Critical**: SQL Injection, Command Injection, Path Traversal
              - **Major**: XSS, Weak Encryption, Deserialization
              - **Minor**: Hardcoded Password, Weak Hash, Insecure Random
              - **Info**: Log Injection, Sensitive Data Exposure
              
              📝 **Next Steps:**
              1. Review security hotspots in SonarQube dashboard
              2. Address critical and major vulnerabilities
              3. Update code quality based on findings`
            });
          }
    
    - name: Upload SonarQube report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sonarqube-report
        path: |
          apis/java-vulnerabilities/target/sonar/
          .sonar/
        retention-days: 30 